import OpenAI from "openai";
import { ChatCompletionCreateParamsNonStreaming } from "openai/resources/chat/completions.mjs";

const openai = new OpenAI({
  apiKey: process.env["OPENAI_API_KEY"], // This is the default and can be omitted
});

export const getAILessonTextContent = async (prompt?: string | null) => {
  if (prompt == null) return false;

  const input: ChatCompletionCreateParamsNonStreaming = {
    messages: [
      {
        role: "system",
        content:
          "Don't make assumptions about what values to plug into functions",
      },
      {
        role: "system",
        content:
          "Give a course chapter lesson  based on the following course, lesson and user prompt.",
      },
      { role: "user", content: prompt },
    ],
    functions: [
      {
        name: "generateChapterLesson",
        description:
          "Use this function to output user instruction. The function will output a course chpater text lesson based on the user prompt.",
        parameters: {
          type: "object",
          properties: {
            content: {
              type: "string",
              description: "The course title generated by the function.",
            },
          },
          required: ["content"],
        },
      },
    ],
    model: "gpt-3.5-turbo",
    temperature: 0,
  };

  const chatCompletion = await openai.chat.completions.create(input, {
    timeout: 10000, // 10s
  });

  const title = JSON.parse(
    chatCompletion.choices[0].message.function_call?.arguments!
  ) as { content: string };

  return title.content || false;
};
